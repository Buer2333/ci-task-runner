#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const util = require('util');
const program = require('commander');
const defaultsDeep = require('lodash.defaultsdeep');
const gulp = require('gulp');



const gitWebpack = require('../');
const options = {modules:[]};
const CONFIG_PATH_NAME = 'git-webpack.json';

program
    .version(require('../package.json').version)
    .usage('[options]')
    .option('--modules <dir>...', '模块列表', list)
    .option('--assets [file]', '文件索引表输出路径')
    .option('--no-assets', '不输出文件索引表')
    .option('--dependencies [dir]...', '依赖的文件与目录列表（它的变更会引起模块重新编译）', list)
    .option('--parallel [number]', 'Webpack 进程最大并发数', parseInt)
    .option('--config [path]', '配置文件路径')
    .option('--init', '初始化项目，生成配置文件')
    .option('--debug', '开启调试模式')
    .parse(process.argv);


if (program.init) {
    fs.access(path.join(process.cwd(), CONFIG_PATH_NAME), errors => {
        if (errors) {
            let example = path.join(__dirname, '..', 'example');
            gulp.src([
                path.join(example, 'git-webpack-module-example', '**/*'),
                path.join(example, 'git-webpack.json')
            ]).pipe(gulp.dest('./'));
            console.log(`"${CONFIG_PATH_NAME}" has been created.`);
        }
    });
    return;
}

let configFile;
if (program.config) {
    configFile = path.join(process.cwd(), program.config);
    defaultsDeep(options, require(configFile));
} else {
    // 尝试加载目录默认的配置文件
    try {
        let file = path.join(process.cwd(), CONFIG_PATH_NAME);
        defaultsDeep(options, require(file));
        configFile = file;
    } catch (e) {}
}


if (configFile) {
    // 使用配置文件的目录作为基准
    options.context = path.dirname(configFile);
} else {
    options.context = process.cwd();
}


defaultsDeep(options, {
    modules: program.modules,
    assets: program.assets,
    dependencies: program.dependencies,
    parallel: program.parallel,
    debug: program.debug
}, options);


function list(val) {
    return val.split(',');
}

if (options.modules.length) {
    gitWebpack(options);
} else {
    program.help();
}

