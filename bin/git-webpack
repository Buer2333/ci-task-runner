#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const program = require('commander');
const defaultsDeep = require('lodash.defaultsdeep');
const gulp = require('gulp');

const gitWebpack = require('../');
const options = { modules: [] };
const CONFIG_PATH_NAME = 'git-webpack.json';
const CONTEXT = process.cwd();

program
    .version(require('../package.json').version)
    .usage('[options]')
    .option('--modules <dir>...', '模块目录名列表', list)
    .option('--assets [file]', '文件索引表输出路径')
    .option('--no-assets', '不输出文件索引表')
    .option('--dependencies [dir]...', '依赖的文件与目录列表（它的变更会引起模块重新编译）', list)
    .option('--parallel [number]', 'Webpack 进程最大并发数', parseInt)
    .option('--timeout [number]', '设置单个 Webpack 构建运行超时限制', parseInt)
    .option('--env [map]', '设置环境变量，例如 GIT_WEBPACK=1&DEPLOY=1', map)
    .option('--argv [list]', '设置启动执行 webpack.config.js 的命令行参数', list)
    .option('--force', '强制编译所有的模块目录')
    .option('--config [path]', '外部配置文件路径')
    .option('--init', '初始化项目，生成配置文件')
    .option('--debug', '开启调试模式')
    .parse(process.argv);


if (program.init) {
    fs.access(path.join(CONTEXT, CONFIG_PATH_NAME), errors => {
        if (errors) {
            let example = path.join(__dirname, '..', 'example');
            gulp.src([
                path.join(example, 'git-webpack-module-example', '**/*'),
                path.join(example, 'git-webpack.json')
            ]).pipe(gulp.dest('./'));
            console.log(`"${CONFIG_PATH_NAME}" has been created.`);
        }
    });
    process.exit(1);
}

if (program.config) {
    let configFile = path.join(CONTEXT, program.config);
    defaultsDeep(options, require(configFile));
} else {
    try {
        // 尝试加载目录默认的配置文件
        let file = path.join(CONTEXT, CONFIG_PATH_NAME);
        defaultsDeep(options, require(file));
    } catch (e) { }
}


defaultsDeep(options, {
    modules: program.modules,
    assets: program.assets,
    dependencies: program.dependencies,
    parallel: program.parallel,
    env: program.env,
    force: program.force,
    debug: program.debug,
    context: CONTEXT
}, options);


function list(val) {
    return val.split(',');
}

function map(val) {
    let ret = {};
    let reg = /([^?&=]+)=([^?&=]*)/g;
    val.replace(reg, function (rs, key, value) {
        value = String(value);
        ret[key] = value;
        return rs;
    });
    return ret;
}

if (options.modules.length) {
    gitWebpack(options);
} else {
    program.help();
    process.exit(0);
}

