#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const program = require('commander');
const defaultsDeep = require('lodash.defaultsdeep');
const gulp = require('gulp');

const gitWebpack = require('../');
const CONFIG_PATH_NAME = 'git-webpack.json';
let CONTEXT = process.cwd();

program
    .version(require('../package.json').version)
    .usage('[options]')
    .option('--modules <string>...', '模块目录名列表', list)
    .option('--assets [string]', '文件索引表输出路径')
    .option('--watch [string]...', '依赖的文件与目录列表（它的变更会引起模块重新编译）', list)
    .option('--parallel [number]', '进程最大并发数', parseInt)
    .option('--config [string]', '外部配置文件路径')
    .option('--init', '初始化项目，生成配置文件')
    .option('--build-timeout [number]', null, parseInt)
    .option('--build-force', null)
    .option('--build-launch [string]')
    .option('--build-cwd [string]')
    .option('--build-env [list]', null, query)
    .option('--build-exec-path [string]')
    .option('--build-exec-argv [list]', null, list)
    .option('--no-build-silent')
    .option('--build-stdio [list]', null, list)
    .option('--build-uid [number]', null, parseInt)
    .option('--build-gid [number]', null, parseInt)
    .parse(process.argv);



function list(val) {
    return val.split(',');
}


function query(val) {
    let ret = {};
    let reg = /([^,=]+)=([^,=]*)/g;
    val.replace(reg, function (rs, key, value) {
        value = String(value);
        ret[key] = value;
        return rs;
    });
    return ret;
}


function config(file) {
    const options = {
        modules: program.modules,
        watch: program.watch,
        assets: program.assets,
        parallel: program.parallel,
        build: (() => {
            let build = {};
            var reg = /^build(\w)/;

            Object.keys(program).forEach((key) => {
                if (reg.test(key)) {
                    build[key.replace(reg, ($0, $1) => {
                        return $1.toLowerCase();
                    })] = program[key];
                }
            });

            return build;
        })()
    };

    if (file) {
        let configFile = path.join(CONTEXT, file);
        let config = require(configFile);
        defaultsDeep(options, config);
        CONTEXT = path.resolve(configFile, '../');
    } else {
        try {
            // 尝试加载目录默认的配置文件
            let configFile = path.join(CONTEXT, CONFIG_PATH_NAME);
            let config = require(configFile);
            defaultsDeep(options, config);
        } catch (e) { }
    }

    return options;
}


function init() {
    fs.access(path.join(CONTEXT, CONFIG_PATH_NAME), errors => {
        if (errors) {
            let example = path.join(__dirname, '..', 'example');
            gulp.src([
                path.join(example, 'git-webpack-module-example', '**/*'),
                path.join(example, 'git-webpack.json')
            ]).pipe(gulp.dest('./'));
            console.log(`"${CONFIG_PATH_NAME}" has been created.`);
        }
    });
}


if (program.init) {
    init();
} else {
    let options = config(program.config);
    gitWebpack(options, CONTEXT);
}