#!/usr/bin/env node

'use strict';
const fs = require('fs');
const path = require('path');
const program = require('commander');
const gulp = require('gulp');


const taskRunner = require('../');
const PACKAGE = require('../package.json');
const CONFIG_PATH_NAME = `.${PACKAGE.name}.json`;
let CONTEXT = process.cwd();

process.env.LOGER_DISPLAY_COLOR = 1;

program
    .version(require('../package.json').version)
    .usage('[options]')
    .option('--parallel [number]', 'the maximum number of concurrent processes', parseInt)
    .option('--force', 'forces all tasks to run')
    .option('--config [path]', 'the configuration file path')
    .option('--init', 'initialize the project')
    .parse(process.argv);

function config(file) {
    let options = {
        parallel: program.parallel,
        force: program.force
    };

    if (file) {
        let configFile = path.resolve(CONTEXT, file);
        let config = require(configFile);
        options = Object.assign(config, options);
        CONTEXT = path.resolve(configFile, '../');
    } else {
        let configFile = path.resolve(CONTEXT, CONFIG_PATH_NAME);
        try {
            // 尝试加载目录默认的配置文件
            let config = require(configFile);
            options = Object.assign(config, options);
        } catch (e) {
            console.error(`configuration not found: "${configFile}"`);
            process.exit(1);
        }
    }

    return options;
}


function init() {
    fs.access(path.resolve(CONTEXT, CONFIG_PATH_NAME), errors => {

        if (!errors) {
            return;
        }

        let example = path.resolve(__dirname, '..', 'example');

        gulp.src([
            path.resolve(example, '**/*'),
            '!' + path.resolve(example, 'package.json')
        ]).pipe(gulp.dest('./')).on('end', function (errors) {
            if (errors) {
                throw errors;
            }
            console.log(`"${CONFIG_PATH_NAME}" has been created.`);
        });

    });
}


if (program.init) {
    init();
} else {
    let options = config(program.config);
    taskRunner(options, CONTEXT).catch(errors => process.nextTick(() => {
        console.error(errors);
        process.exit(1);
    }));
}